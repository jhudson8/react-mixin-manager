/*!
 * https://github.com/jhudson8/react-mixin-manager v0.13.0;  MIT license; Joe Hudson<joehud_AT_gmail.com>
 */
!function(e){"function"==typeof define&&define.amd?define([],function(){return e}):"undefined"!=typeof exports&&"undefined"!=typeof require?module.exports=e:e(React)}(function(React){function setState(e,n){if(n.isMounted())n.setState(e);else if(n.state)for(var t in e)e.hasOwnProperty(t)&&(n.state[t]=e[t]);else{var i=n.__temporary_state||{};for(var t in e)e.hasOwnProperty(t)&&(i[t]=e[t]);n.__temporary_state=i}}function getState(e,n){var t=n.state,i=n.__temporary_state;return t&&t[e]||i&&i[e]}function get(values,index,initiatedOnce,rtn){function addTo(name){var indexName=name,match=name.match(/^([^\(]*)\s*\(([^\)]*)\)\s*/),params=match&&match[2];if(name=match&&match[1]||name,!index[indexName]){params&&(params=eval("["+params+"]"));var mixin=_mixins[name],checkAgain=!1,skip=!1;if(!mixin)throw new Error('invalid mixin "'+name+'"');if("function"==typeof mixin)_initiatedOnce[name]?(initiatedOnce[name]?skip=!0:(initiatedOnce[name]=[],mixin=name),params&&initiatedOnce[name].push(params)):(mixin=mixin.apply(this,params||[]),checkAgain=!0);else if(params)throw new Error('the mixin "'+name+'" does not support parameters');get(_dependsOn[name],index,initiatedOnce,rtn),get(_dependsInjected[name],index,initiatedOnce,rtn),index[indexName]=!0,checkAgain?get([mixin],index,initiatedOnce,rtn):skip||(checkForInlineMixins(mixin,rtn),rtn.push(mixin))}}function checkForInlineMixins(e,n){e.mixins&&get(e.mixins,index,initiatedOnce,n)}function handleMixin(e){e&&(Array.isArray(e)?get(e,index,initiatedOnce,rtn):"string"==typeof e?addTo(e):(checkForInlineMixins(e,rtn),rtn.push(e)))}if(Array.isArray(values))for(var i=0;i<values.length;i++)handleMixin(values[i]);else handleMixin(values)}function applyInitiatedOnceArgs(e,n){function t(e,t,i){t=t.call(this,i||[]);var a=n.indexOf(e);n.splice(a,1,t)}for(var i in e)e.hasOwnProperty(i)&&t(i,_mixins[i],e[i])}function addMixin(e,n,t,i){function a(e){_mixins[e]=n,_dependsOn[e]=t.length&&t,_initiatedOnce[e]=i&&!0}a(e);var r=e.match(namespaceMatch);r&&!_mixins[r[1]]&&a(r[1])}function GROUP(){}function mixinParams(e){var n,t=e[0],i=!1;if("object"==typeof t?(n=t.name,i=t.initiatedOnce):n=t,!n||!n.length)throw new Error("the mixin name hasn't been specified");return Array.isArray(e[1])?[n,e[1][0],Array.prototype.slice.call(e[1],1),i]:[n,e[1],Array.prototype.slice.call(e,2),i]}function load(){React.mixins.defaultDeferUpdateInterval=0;var e=999999999;React.mixins.add({name:"deferUpdate",initiatedOnce:!0},function(n){function t(e){var n=e.state._deferUpdateTimer;n&&(clearTimeout(n),delete e.state._deferUpdateTimer)}for(var i=e,a=0;a<n.length;a++)n[a].length>0&&(i=Math.min(i,n[a]));return i===e&&(i=React.mixins.defaultDeferUpdateInterval),{getInitialState:function(){return{}},shouldComponentUpdate:function(){return this.state._deferUpdateTimer&&i>0?!1:void 0},componentDidUpdate:function(){t(this)},deferUpdate:function(){if(0>i)return this.forceUpdate();var e=this.state,n=this;t(this),e._deferUpdateTimer=setTimeout(function(){t(n),n.isMounted()&&n.forceUpdate()},i)}}}),React.mixins.add("state",{getInitialState:function(){return{}},componentWillMount:function(){var e=this.__temporary_state;if(e){for(var n in e)e.hasOwnProperty(n)&&(this.state[n]=e[n]);delete this.__temporary_state}}}),React.mixins.setState=setState,React.mixins.getState=getState}var _dependsOn,_dependsInjected,_mixins,_initiatedOnce,_createClass=React.createClass;React.createClass=function(e){return e.mixins&&(e.mixins=React.mixins.get(e.mixins)),_createClass.apply(React,arguments)};var namespaceMatch=/^[^\.]+\.(.*)/;React.mixins={get:function(){var e,n,t=[],i={},a={};get(Array.prototype.slice.call(arguments),i,a,t),applyInitiatedOnceArgs(a,t);for(var r=0;r<t.length;r++)if(t[r].mixins){e=t[r],n={};for(var s in e)e.hasOwnProperty(s)&&"mixins"!==s&&(n[s]=e[s]);t[r]=n}return t},inject:function(e){var n=_dependsInjected[e];n||(n=_dependsInjected[e]=[]),n.push(Array.prototype.slice.call(arguments,1))},alias:function(e){addMixin(e,GROUP,Array.prototype.slice.call(arguments,1),!1)},add:function(){addMixin.apply(this,mixinParams(arguments))},exists:function(e){return _mixins[e]||!1},_reset:function(){_dependsOn={},_mixins={},_dependsInjected={},_initiatedOnce={},load()}},React.mixins._reset()});